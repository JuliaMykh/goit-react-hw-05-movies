{"version":3,"file":"static/js/311.e7ad5670.chunk.js","mappings":"6OAAA,aAAO,OAAP,oBAAO,WAA4BA,GAA5B,mFACO,mCACNC,EAFD,6CAE6CD,EAF7C,YAGCE,EAHD,mBACO,mCADP,4BAKkBC,MAAM,GAAD,OAAIF,GAAJ,OAAUC,IALjC,cAKCE,EALD,gBAMcA,EAASC,OANvB,cAMCC,EAND,yBASEA,GATF,mE,gCCEMC,EAAUC,EAAAA,EAAAA,GAAH,8RAcPC,EAAWD,EAAAA,EAAAA,GAAH,uFAKRE,EAAUF,EAAAA,EAAAA,IAAH,2DAKPG,EAAWH,EAAAA,EAAAA,GAAH,iEAKRI,EAAWJ,EAAAA,EAAAA,KAAH,iE,SC3BRK,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzB,OAEI,SAACP,EAAD,UACGO,EAAOC,KAAKC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC1C,OACE,UAACX,EAAD,YACI,SAACC,EAAD,CACEW,IACEF,EAAY,0CAAsCA,GAAiB,8FAErEG,IAAKF,KAET,UAACT,EAAD,sBAAiB,SAACC,EAAD,UAAWM,GAAc,gBACzC,UAACP,EAAD,0BAAqB,SAACC,EAAD,UAAWQ,SARpBH,EAWlB,KAGR,ECGD,EArBa,WACX,IAAQjB,GAAYuB,EAAAA,EAAAA,MAAZvB,QACR,GAA4BwB,EAAAA,EAAAA,UAAS,MAArC,eAAOV,EAAP,KAAeW,EAAf,KAYE,OAVFC,EAAAA,EAAAA,YAAU,WACR,KHXG,SAAP,mCGaMC,CAAa3B,GAAS4B,KAAKH,EAI5B,CAFD,MAAOI,GACLC,QAAQC,IAAIF,EACb,CACF,GAAE,CAAC7B,KAGE,8BACCc,GAAUA,EAAOC,KAAKiB,OAAS,GAAK,SAACnB,EAAD,CAAUC,OAAQA,KAAe,wEAG7E,C,sBCzBD,SAASmB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOd,KAAKS,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOT,GACdI,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAAST,EACnE,CAEAQ,OAAMgB,EACR,GACF,CACF,C","sources":["components/services/apiMovieCast.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","pages/CastPage/CastPage.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export async function getMovieCast(movieId) {\n  const key = '73f6ff20fa414d222403a4af56220c3d';\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n  const filter = `?api_key=${key}&language=en-US`;\n\n  const response = await fetch(`${url}${filter}`);\n  const data = await response.json();\n\n  // console.log(data);\n  return data;\n\n}\n\n","import styled from \"@emotion/styled\";\n\nexport const CastLst = styled.ul`\n    \n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 40px) / 2);\n  text-align: center;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n`;\n\nexport const CastName = styled.h4`\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const CastSpan = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\n\nimport { CastLst, CastItem, CastImg, CastName, CastSpan } from './Cast.styled';\n\nexport const CastList = ({ actors }) => {\n  return (\n     \n      <CastLst>\n        {actors.cast.map(({ id, name, profile_path, character }) => {\n          return (\n            <CastItem key={id}>\n                <CastImg\n                  src={\n                    profile_path ? `https://image.tmdb.org/t/p/w500/${profile_path}` : \"https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-';\"\n                  }\n                  alt={character}\n                />\n              <CastName>Name : <CastSpan>{name ? name : \"No name\"}</CastSpan></CastName>\n               <CastName>Character: <CastSpan>{character}</CastSpan></CastName>\n            </CastItem>\n          );\n        })}\n      </CastLst>\n  );\n}\n\nCastList.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  profile_path: PropTypes.string,\n  character: PropTypes.string,\n};\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {getMovieCast} from 'components/services/apiMovieCast';\nimport { CastList } from 'components/Cast/Cast';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);    \n\n  useEffect(() => {\n    try {\n      \n      getMovieCast(movieId).then(setActors);  \n    }\n    catch (err) {\n      console.log(err);\n    }\n  }, [movieId ]);\n    \n    return (\n        <>\n        {actors && actors.cast.length > 0 ? (<CastList actors={actors} />) : (<h2>We don't have the information about actors</h2>)}\n            </>\n    );\n}\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","url","filter","fetch","response","json","data","CastLst","styled","CastItem","CastImg","CastName","CastSpan","CastList","actors","cast","map","id","name","profile_path","character","src","alt","useParams","useState","setActors","useEffect","getMovieCast","then","err","console","log","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined"],"sourceRoot":""}